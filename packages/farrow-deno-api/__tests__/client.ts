/**
 * This file was generated by farrow-api
 * Don't modify it manually
*/

export type JsonType =
  | number
  | string
  | boolean
  | null
  | undefined
  | JsonType[]
  | { toJSON(): string }
  | { [key: string]: JsonType }

/**
 * @label CountState
*/
export type CountState = {
  /**
  * @remarks count of counter
  */
  count: number
}

export type ApiClientLoaderInput = {
  path: string[]
  input: JsonType
}

export interface ApiClientLoaderOptions {
  batch?: boolean
  stream?: boolean
  cache?: boolean
}

export type ApiClientOptions = {
  loader: (input: ApiClientLoaderInput, options?: ApiClientLoaderOptions) => Promise<JsonType>
}

export const createApiClient = (options: ApiClientOptions) => {
  return {
    getCount: (input: {
      
    }, loaderOptions?: ApiClientLoaderOptions) => {
      return options.loader(
        {
          path: ['getCount'],
          input: input as JsonType,
        },
        loaderOptions
      ) as Promise<CountState>
    },
    setCount: (input: {
      /**
      * @remarks new count value
      */
      newCount: number
    }, loaderOptions?: ApiClientLoaderOptions) => {
      return options.loader(
        {
          path: ['setCount'],
          input: input as JsonType,
        },
        loaderOptions
      ) as Promise<CountState>
    },
    triggerError: (input: {
      
    }, loaderOptions?: ApiClientLoaderOptions) => {
      return options.loader(
        {
          path: ['triggerError'],
          input: input as JsonType,
        },
        loaderOptions
      ) as Promise<{
        
      }>
    }
  }
}